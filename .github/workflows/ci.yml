name: CI Pipeline

on:
  pull_request:
    branches:
      - develop
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VERSION: 0.0.1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17' # Specify the Java version required
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn clean install

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Docker build
        run: docker build --build-arg VERSION=${{ env.VERSION }} -t tyatyushkin/telegram:${{ env.VERSION }} .

      - name: Docker push
        run: docker push tyatyushkin/telegram:${{ env.VERSION }}


  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Ensure this matches the version in your pom.xml
          distribution: 'adopt'

      - name: Run tests
        run: mvn test

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      VERSION: 0.0.1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ vars.BASTION }} '
          docker stop telegram || true && docker rm telegram || true &&
          docker pull tyatyushkin/telegram:${{ env.VERSION }} &&
          docker run -e TG_TOKEN=${{ secrets.TG_TOKEN }} -e X_TOKEN=${{ secrets.X_TOKEN}} -e CHAT_ID=${{ secrets.CHAT_ID }} -e X_USERNAME=${{ vars.X_USERNAME }} -e W_TOKEN=${{ secrets.W_TOKEN }} -d --name telegram tyatyushkin/telegram:${{ env.VERSION }}'
      
